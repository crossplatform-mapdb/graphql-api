scalar Time

type AuthToken {
  accessToken: String!
  expiredAt: Time!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}

type User {
  id: ID!
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  places: [Place!]!
  createdAt: Time!
  updatedAt: Time!
}

type Place {
  id: ID!
  name: String!
  description: String!
  user_id: String!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  confirmPassword: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
}

input NewPlace {
  name: String!
  desc: String!
}

input UpdatePlace {
  name: String
  description: String
}

input PlaceFilter {
  name: String
}

type Query {
  users: [User!]!
  places(filter: PlaceFilter, limit: Int = 10, offset: Int = 0): [Place!]!
  user(id: ID!): User!
}

type Mutation {
  register(input: RegisterInput): AuthResponse!
  login(input: LoginInput): AuthResponse!
  createPlace(input: NewPlace!): Place!
  updatePlace(id: ID!, input: UpdatePlace!): Place!
  deletePlace(id: ID!): Boolean!
}